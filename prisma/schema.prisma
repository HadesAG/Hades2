generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String           @id @default(cuid())
  email     String           @unique
  wallet    String?          @unique
  username  String?
  createdAt DateTime         @default(now())
  watchlist WatchlistToken[]
  alerts    Alert[]
  settings  Json?
}

model WatchlistToken {
  id        String   @id @default(cuid())
  symbol    String
  addedAt   DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Alert {
  id          String       @id @default(cuid())
  symbol      String
  type        AlertType
  operator    Operator
  targetValue Float
  status      AlertStatus  @default(ACTIVE)
  triggeredAt DateTime?
  createdAt   DateTime     @default(now())
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Signal {
  id             String   @id @default(cuid())
  symbol         String
  token          String
  confidence     Int
  performance    String
  performanceValue Float
  currentPrice   Float
  targetPrice    Float
  riskLevel      String
  tags           Json
  source         String
  volume24h      Float?
  marketCap      Float?
  createdAt      DateTime @default(now())
}

model TelegramMessage {
  id            String   @id @default(cuid())
  chatId        String
  messageId     Int
  text          String
  date          Int
  fromId        String?
  fromUsername  String?
  channelName   String?
  isBot         Boolean  @default(false)
  entities      Json?
  forwardFrom   Json?
  processed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  @@unique([chatId, messageId])
  @@index([chatId])
  @@index([date])
  @@index([processed])
}

model TelegramSignal {
  id            String   @id @default(cuid())
  source        String   // 'telegram_channel' or 'telegram_bot'
  sourceId      String
  sourceName    String
  messageId     Int
  originalMessage String
  extractedData Json
  timestamp     BigInt
  processed     Boolean  @default(false)
  confidence    Int?
  token         String?
  symbol        String?
  action        String?
  price         Float?
  target        Float?
  stopLoss      Float?
  riskLevel     String?
  createdAt     DateTime @default(now())
  
  @@index([sourceId])
  @@index([timestamp])
  @@index([processed])
  @@index([token])
}

enum AlertType {
  PRICE
  VOLUME
  PERCENT_CHANGE
}

enum Operator {
  ABOVE
  BELOW
}

enum AlertStatus {
  ACTIVE
  TRIGGERED
  PAUSED
}

// Whale tracking models for Smart Money Tracker
model WhaleWallet {
  id          String   @id @default(cuid())
  address     String   @unique
  label       String   // "Alameda Research", "Jump Trading", etc.
  category    WhaleCategoryType
  totalValue  Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  transactions WhaleTransaction[]
  holdings     WhaleHolding[]
  
  @@index([category])
  @@index([isActive])
  @@index([totalValue])
}

model WhaleTransaction {
  id            String   @id @default(cuid())
  walletAddress String
  tokenAddress  String
  tokenSymbol   String
  transactionType TransactionType
  amount        Float
  usdValue      Float
  timestamp     DateTime
  signature     String   @unique
  
  wallet        WhaleWallet @relation(fields: [walletAddress], references: [address])
  
  @@index([walletAddress])
  @@index([tokenSymbol])
  @@index([timestamp])
  @@index([transactionType])
  @@index([usdValue])
}

model WhaleHolding {
  id            String   @id @default(cuid())
  walletAddress String
  tokenAddress  String
  tokenSymbol   String
  balance       Float
  usdValue      Float
  lastUpdated   DateTime @default(now())
  
  wallet        WhaleWallet @relation(fields: [walletAddress], references: [address])
  
  @@unique([walletAddress, tokenAddress])
  @@index([walletAddress])
  @@index([tokenSymbol])
  @@index([usdValue])
}

enum WhaleCategoryType {
  VC_FUND
  HEDGE_FUND
  MARKET_MAKER
  KNOWN_TRADER
  INSTITUTION
  PROJECT_TREASURY
}

enum TransactionType {
  BUY
  SELL
  TRANSFER_IN
  TRANSFER_OUT
}